pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/vasuchallapu/jenkins-CICD.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.49.1:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          env.DOCKER_IMAGE = "vasuchallapu/ultimate-cicd:${BUILD_NUMBER}"
          // Build Docker image
          sh "docker build -t ${DOCKER_IMAGE} spring-boot-app"
        }
      }
    }

    stage('Trivy Scan Docker Image') {
      steps {
        script {
          // Install Trivy if not already available on Jenkins agent
          sh '''
            if ! command -v trivy &> /dev/null
            then
              echo "Installing Trivy..."
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
              sudo mv trivy /usr/local/bin/
            fi
          '''

          // Scan Docker image
          sh "trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH ${DOCKER_IMAGE}"
          // Fail pipeline if critical vulnerabilities are found
          sh "trivy image --exit-code 1 --severity CRITICAL ${DOCKER_IMAGE}"
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            docker.image(env.DOCKER_IMAGE).push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "jenkins-CICD"
        GIT_USER_NAME = "vasuchallapu"
      }
      steps {
        withCredentials([string(credentialsId: 'GitHub-Token', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "vasuchallapu@gmail.com"
            git config user.name "vasuchallapu"
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s|\\(image: vasuchallapu/ultimate-cicd:\\)[0-9]*|\\1${BUILD_NUMBER}|g" spring-boot-app-manifests/deployment.yml
            git add spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
